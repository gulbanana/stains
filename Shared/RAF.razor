@implements IDisposable
@inject IJSRuntime JS
@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public Action<TimeSpan>? UpdateState { get; set; }
    private IJSInProcessObjectReference? module;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await JS.InvokeAsync<IJSInProcessObjectReference>("import", "./Shared/RAF.razor.js");
            module.InvokeVoid("start", DotNetObjectReference.Create(this));
        }
    }

    public void Dispose()
    {
        module?.InvokeVoid("stop");
    }

    [JSInvokable]
    public void OnFrame(double timestampMilliseconds)
    {
        UpdateState?.Invoke(TimeSpan.FromMilliseconds(timestampMilliseconds));
        StateHasChanged();
    }
}

@ChildContent